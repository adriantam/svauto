#!/bin/bash
# This script gather the functions needed
# by the SDE services scripts from /etc/init.d

SV_HOME=/usr/local/sandvine/

#this line will exit from the script if the user is not root or not run via sudo
if [ "$1" != "status" ]; then
    . $SV_HOME/scripts/check_is_root.sh
fi
. $SV_HOME/etc/rc.conf
. $SV_HOME/bin/jms_stunnel.sh
pidfile=$SV_HOME/run/$processname.pid
[ -d $(dirname $pidfile) ] || mkdir -p $(dirname $pidfile)
PROCESS_SCRIPT=$SV_HOME/scripts/run_$processname
short_script=$(basename $PROCESS_SCRIPT)
SVLOG=$SV_HOME/scripts/svlog.sh

. $SVLOG
if [ -f /etc/profile.d/java.sh ];then
	. /etc/profile.d/java.sh
fi
AVOID_SET_TRAPS=1

# source function library
. /etc/rc.d/init.d/functions-centos6

. $SV_HOME/scripts/sv_common_functions

export LD_LIBRARY_PATH=$SV_HOME/lib:$SV_HOME/lib64:/usr/lib64/perl5/CORE
export LANG=C

# timeout value in seconds for pre-start scripts
PRE_START_TIMEOUT=40
PDB_EXE=$SV_HOME/bin/pdbClient
RETVAL=0
PDB_RELOAD_STATE_PATH=devices/service/1/lastReloadDetails/lastReloadDetailsEntry/inError/
RELOAD_RESULTS_ENTRIES=""

ALL_SCRIPTS="$SCRIPTS $PREREQUISITE_SCRIPTS"
TERM_MSG="TERMINATE"

# Sanity checks.
[ -x $PROCESS_SCRIPT ] || exit 1

_print_service_OK()
{
    success
    echo
}

_print_service_FAIL()
{
    failure
    echo
    [ -n "$*" ] && print_err_msg "$*"
}

_print_service_WARNING()
{
    warning
    Svlog  MCD_LOG_SDE_IT  MCD_LOG_SDE_IT_BLANK_1  $SVLOG_FACILITY.warning " $processname is not getting up (taking longer than expected). It may be due to an ongoing HA activity or the connection to pdbClient may be lost."
    echo
    echo >&2 "Warning: $processname initialization is taking longer than expected (currently in $processStatus phase), refer to /var/log/svlog for more information."
}

print_err_msg()
{
    local operation=$1
    echo >&2 "Error $operation $processname, refer to /var/log/svlog for more information"
}

print_warning_msg()
{
    local operation=$1
    echo >&2 "A warning occurred while $operation $processname, refer to /var/log/svlog for more information"
}

_daemon() {
	local script=$1
	local tmp=$(mktemp /tmp/run.XXXXXX)
	echo $script '>/dev/null 2>&1 &' > $tmp
	at now < $tmp  >/dev/null 2>&1
	local RES=$?
	rm -rf $tmp
	return $RES
}

# Wait for the given scripts before the start up process continues.
function _wait_scripts()
{
        local scripts=$*
        local input=""
        while [ -n "$scripts" ];
        do
                # Block until next script writes its name (meaning it is "done").
                if read < $PRE_START_FIFO
                then
			            [ "$REPLY" == "$TERM_MSG" ] && return 1
                        script=$REPLY
                        scripts=$(echo $scripts | sed "s:$script::; s/^ //; s/ $//")
                fi
        done
        return 0
}

_wait_pid_file() {
	local processname=$1
	local count=0
	while [ $count -lt 15 ];
	do
		echo -n $"."
		[ -f $pidfile ] && return 0
		count=$(($count + 1 ))
		sleep 1
	done
	return 1
}


# set the name of the entry in the pdb tree in which we are setting
# the status of the process
_set_pdb_status_path()
{
	## right now we have only single process under the sde branch
	## if this would change we would have to update this 
	case "$processname" in
		"ecd")
		pdb_status_location=generic
		;;
		"scdpd")
		pdb_status_location=generic
		;;
		"msd")
		pdb_status_location=generic
		;;
		*)
		pdb_status_location=sde
		;;
	esac
}


# return a list of all the warning variables that are set to the value that we are looking for
_get_reload_error_entries()
{
	# this function must only be applied to svsde process other cases do not load policy file
	if [ "$processname" = "svsde" ]; then
		local state=$1
		RELOAD_RESULTS_ENTRIES=""
		local res_list=$($PDB_EXE -c "ls $PDB_RELOAD_STATE_PATH" 2>/dev/null | grep -e "\[$state\]" | sed -e 's/\[//' | sed -e 's/\]//' | awk '{print $2 }')
		RELOAD_RESULTS_ENTRIES=$res_list
	fi
#
}

# this function would set the status for reload
_update_reload_error_status()
{
	local inx=$1
	local stat=$2
	$PDB_EXE -c "set ${PDB_RELOAD_STATE_PATH}/${inx} $stat" 2>/dev/null
}

# this function would clear error status for reload - that this function 
# is called if the reload was successful so that we would clear the alarms we have
_clear_old_reload_failures()
{

	# this function must only be applied to svsde process other cases do not load policy file
	if [ "$processname" != "svsde" ]; then
		return 0
	fi
	# sanity test - did we save anything before - if not then there is nothing we need to do
	if [ -n "$RELOAD_RESULTS_ENTRIES" ]; then
		for index in $RELOAD_RESULTS_ENTRIES
		do
			# we now know that this value need to be set to false - as the reload was successful
			local state=$($PDB_EXE -c "ls $PDB_RELOAD_STATE_PATH" 2>/dev/null | grep -e "\[$index\]" | awk '{ print $4 }')
			_update_reload_error_status $index false
		done
	fi
}

# this function would set the state of reload for any entry that is 
# not successful as a result alarm would be isue on this enrty
_set_reload_error_status()
{
	# this function must only be applied to svsde process other cases do not load policy file
	if [ "$processname" = "svsde" ]; then
		_get_reload_error_entries true 
		for fail in $RELOAD_RESULTS_ENTRIES
		do
			_update_reload_error_status $fail true
		done
	fi
}

_set_admin_status()
{
 	# please note that we have 2 paths that we need to set not just one
         local status=$1
         local path_under_status=$2
         local pdbcmd="set devices/service/1/serviceComponentTable/serviceComponentEntry/adminStatus/$path_under_status/$processname"

         $PDB_EXE -c "$pdbcmd $status" 2>/dev/null
         ret=$?
         return $ret
}

# for all processes other than scdpd this function
# will set the admin status to up, but for the
# scdpd it would not work as the pdb tree is not
# online at this point
_set_admin_status_up_pre () {
	local ret=0
	if [ "$pdb_status_location" != "generic" ]; then
		_set_admin_status up $pdb_status_location
		ret=$?
	fi
	return $ret
}

# for the scdpd we can set the values for the admin status
# only after the process itself is up, because before that
# there is nowhere that we can actually set it at
_set_admin_status_up_post() {
	local ret=0
	if [ -n "$pdb_status_location" ]; then
		_set_admin_status up $pdb_status_location
		ret=$?
	fi
	return $ret
}


# this function would return a process status for a given process
function _get_process_oper_status_()
{
	local res=$($PDB_EXE -c "lst -cols 3,6 devices/service/1/serviceComponentTable" 2>/dev/null | grep $processname | awk '{print $3}')
	echo $res
}

# this function would return the operation status for a given process
function _get_process_oper_status()
{
	local pdb_opr_path=devices/service/1/serviceComponentTable/serviceComponentEntry/operStatus/$pdb_status_location
	local res=$($PDB_EXE -c "ls $pdb_opr_path" 2>/dev/null | grep $processname | awk '{print $4}')
	echo $res
}

function _wait_for_pdb_connection()
{
	local MAX_TIMEOUT=20
	local timeout=$(( $(date +%s) + $MAX_TIMEOUT ))
	#wait until max time or until pdbClient is responding
	while : ; do
		echo -n $"." 
		netstat -anp | grep 3033.*LISTEN >/dev/null 2>&1 && \
		if [ -z "$($PDB_EXE -c 'ls' 2>&1 | grep 'failed to connect')" ] ; then
			return 0
		fi
		#timeout no response
		if [ $timeout -lt $(date +%s) ] ; then
			echo >&2 "Error: Timeout pdb connection failed - check validity of scdpd process"
			return 1
		fi
		sleep 1
	done
	return 1
}

_get_reload_timeout()
{
        if [ "$processname" = "svsde" ]; then
                echo 5
        else
                echo 1
        fi
}

#global HA stats
per_env_state=""
per_recovery_state=""
rep_env_state=""
rep_node_role=""
rep_sync_state=""
rep_recovery_state=""

# Sample HA stats needed for determine HA status on startup
function _sample_HA_status()
{

        per_env_state=$($PDB_EXE -c "get devices/persistency/1/enabled" 2>/dev/null | xargs)
        per_recovery_state=$($PDB_EXE -c "get devices/persistency/1/stats/recoveryState" 2>/dev/null | xargs)
        rep_env_state=$($PDB_EXE -c "get devices/failoverCluster/1/stats/environmentState" 2>/dev/null | xargs)
        rep_node_role=$($PDB_EXE -c "get devices/failoverCluster/1/stats/faultDetector/nodeRole" 2>/dev/null | xargs)
        rep_sync_state=$($PDB_EXE -c "get devices/failoverCluster/1/stats/stateSharing/syncState" 2>/dev/null | xargs)
        rep_recovery_state=$($PDB_EXE -c 'get devices/failoverCluster/1/stats/stateSharing/recoveryState' 2>/dev/null | xargs)

}

# Wait until HA operations: Recovery/Synchronization are finished
function _wait_for_HA_operations()
{

	_sample_HA_status

	if [ "$rep_sync_state" = "[Synchronizing]" ];then
		echo -e "\nSDE is synchronizing with the active SDE. Synchronization process may take a while."

	elif [[ "$rep_recovery_state" = "[in progress]" || "$per_recovery_state" = "[in progress]" ]];then
		echo -e "\nSDE is recovering tables from persistent data. Recovery process may take a while."
	fi

	while [[ ("$rep_env_state" = "[true]" && ( "$rep_sync_state" = "[Synchronizing]" || "$rep_recovery_state" = "[in progress]" )) || ("$per_env_state" = "[true]" && "$per_recovery_state" = "[in progress]")]];
	do
		_display_progress_bar
		_sample_HA_status
	done

	if [[ "$rep_env_state" = "[false]" || ( "$rep_node_role" = "[passive]" && "$rep_sync_state" != "[Synchronized]") || ( "$rep_node_role" = "[active]" && "$rep_recovery_state" = "[failed]") || "$per_env_state" = "[false]" || "$per_recovery_state" = "[failed]" ]];then
		return 1
	else 
		return 0
	fi

}

function _wait_for_online_status()
{
	local setonline=$1
	local ONLINE_TIMEOUT=60
	processStatus=""
	local timercount=$(seq 1 $ONLINE_TIMEOUT )
	for i in $timercount
	do
		echo -n $"." 
		processStatus=$(_get_process_oper_status)
		if [ "$processStatus" == "[online]" ];then
			if [ -n "$setonline" ]; then
				_set_admin_status_up_post
			fi
			return 0
		else
			sleep 1
		fi
	done
	if [ -z "$processStatus" ];then
            echo >&2 "Error: $processname is still not online, refer to /var/log/svlog for more information."
            return 1
	else
        # If process svsde is still not online, check if
        # HA operations are the reason. If so wait until 
        # they complete else fail as usual
		if [ "$processname" = "svsde" ];then
			_wait_for_HA_operations
			[ $? -eq 0 ] && return 0
		fi

                if [ "$processStatus" == "[stopped]" ];then
                    return 1
                else
                    return 2
                fi
	fi
}
_check_pdb() {
	_wait_for_pdb_connection && \
	_wait_for_online_status $1

        local res=$?
	[ $res -ne 0 ] && return $res
	local timeout=10  count=0  pdb_res
	while [ $count -lt $timeout ]
	do
        #per reqst00344092_Svreload_is_failed_in_the_Logs_but_not_on_the_console we change from sleep 1 to 5 sec
        # to be sure that the status is the new updated
        sleep 1
		pdb_res=$($PDB_EXE -c "lst devices.pdbMount.1.100.10" 2>/dev/null | grep $processname)
        sleep 1
		pdb_res=$($PDB_EXE -c "lst devices.pdbMount.1.100.10" 2>/dev/null | grep $processname)
		if [ ! -z "$pdb_res" ];then
			count=$timeout
		else
			count=$(( $count + 1 ))
			echo -n $"."
		fi
	done
	[ -z "$pdb_res" ] && echo >&2 "$processname is still not online, refer to /var/log/svlog for more information" && return 1
	echo "$pdb_res" | awk '
  BEGIN {}
  f=0;
  w=0;
  $1~/[0-9]+/ {
   if($4=="[false]"){
    f=1;
   } else if($5=="[true]") {
    w=2;
   }
  }
  END {
   exit f+w
  }'
	local awk_result=$?
	case $awk_result in
	0) return 0;;
	1) print_err_msg "(re)loading";;
	2) # FAIL_ON_WARNING variable is only required for handling different behaviour (just one) of msd service,
           # as compared to other services like scdpd, svsde and ecd. 
           # msd should not fail in the case of warning but the other services fail.
           if [ "$FAIL_ON_WARNING" = "false" ];then
             return 0
           fi
           ;;
	esac
	return 1
}

## for some reason on the SDE the value of
## last reload time is not set from the application
## the expected format by the CLI is 
## ^[0-9]{8}_[0-9]{6}$ - standard PDB value - ex: 20100502_031500
## so we would be using this script to set this value after finishing the reload
_set_last_reload_time()
{
	# set the time of the reload - get the right time format
	local reload_time=$(date '+%Y%m%d_%H%M%S')
	local pdbPath=devices.service.1.stats.lastReloadTime

	pdb_res=$($PDB_EXE -c "set $pdbPath $reload_time")
	return $pdb_res
}

## this function would set the status of the reload at the end of the reload
## note that this can be either true or false since we don't need anything
## else, the function is called with the status - any reload failure need
## to set this one to false, only if all is OK this need to be set to true
_set_reload_status()
{
	# set the status of the reload
	local pdbPath=devices.service.1.stats.lastReloadSuccessful

	local ret=$($PDB_EXE -c "set $pdbPath $1")
	return $ret
}

## this function run the post_reload_success.sh on reload success
_run_post_reload_script()
{
    #this line has been added for User and Role functionality, since this files can be generated 
    #by the Policy generator which run as 'sv' and the reload script which run as root, so some file can appear as root which
    # become un-usabel by the 'sv' context inside the policy generator
    [ -d /usr/local/sandvine/var/svuser_scripts ] && chmod -R a+rw  /usr/local/sandvine/var/svuser_scripts
    for i in /usr/local/sandvine/var/svuser_scripts/post_reload_success*.sh
    do
       if [ -x  $i ]
       then
          $i
       fi
    done
}

binary_check()
{
	local not_reload=$1
	local lfile=/tmp/check_pdb.msg
        rm -rf $lfile
	_check_pdb $not_reload  2>$lfile

	local retval=$?
	case $retval in
	0)  # all process are online o we return OK
	    _clear_old_reload_failures
            _set_last_reload_time
            if [ "$processname" = "svsde" ];then
                _run_post_reload_script
            fi
            _set_reload_status "true"
            _print_service_OK
            [ -f $lfile ] && cat $lfile
            ;;

	1) # the status of the process is stopped so we return FAILED
            _set_reload_error_status
            _set_reload_status "false"
            _print_service_FAIL	
            [ -f $lfile ] && cat $lfile
            ;;
	2) # the status of the process should be one of these options: initializing, starting or reloading so we return WARNING
            _print_service_WARNING 
            ;;
        esac

	return $retval
}

_cancel_wait_scripts()
{
	local pid=$*
	#send a CANCEL message to the wait_scripts function
	echo "$TERM_MSG" > $PRE_START_FIFO
	#check that this function terminated
	local counter;
	for ((counter=1; counter <= 5 ; counter++)) ; do
		[ ! -d /proc/$pid ] && return 0
    	done

	#if this function is blocked after 5 sec will kill it - SHOULD never happen
	kill -9 $pid
	return 1
}

_wait_prerequisite_scripts()
{
    _wait_scripts "$*" &
    local wait_scripts_pid=$!
    local wait_scripts_counter=0
    local wait_scripts_exited=0
    while [[ $wait_scripts_exited == 0 ]]; do
        if [[ $wait_scripts_counter == $PRE_START_TIMEOUT ]]; then
            Svlog MCD_LOG_SDE_IT  MCD_LOG_SDE_IT_BLANK_1 $SVLOG_FACILITY.err "'$processname' failed to start because its prerequisite startup scripts '$*' didn't start properly"
	        _cancel_wait_scripts $wait_scripts_pid
            return 1
        fi
        ((wait_scripts_counter++))
        echo -n "."
        sleep 1
        kill -0 $wait_scripts_pid >/dev/null 2>&1
        wait_scripts_exited=$? 
    done
    wait $wait_scripts_pid
    exits=$?
    return $exits
}

# First time we set permissions manually,
# next log rotates should set the permissions automatically.
_set_svlog_permissions()
{
    local svlog=$LOG_PATH/svlog
    [ ! -f $svlog ] && touch $svlog
    perm=$(stat -c %a $svlog)
    [ $perm -ne 644 ] && chmod 644 $svlog
}

_kill_scripts()
{
    local scripts=$*
    _kill_processes_by_name 15 $scripts
    local timeout=$(expr $SLEEP_CHUNK + $SLEEP_CHUNK)
    local time_passed=0
    while (($time_passed < $timeout));
    do
        _count_processes_alive $scripts
        local num_alive=$?
        [ $num_alive -eq 0 ] && break
        echo -n "."
        sleep 1
        time_passed=$(expr $time_passed + 1)
    done
    _kill_processes_by_name 9 $scripts
}

_kill_scripts_without_9()
{
    local scripts=$*
    _kill_processes_by_name 15 $scripts
    local timeout=$(expr $SLEEP_CHUNK + $SLEEP_CHUNK)
    local time_passed=0
    while (($time_passed < $timeout));
    do
        _count_processes_alive $scripts
        local num_alive=$?
        [ $num_alive -eq 0 ] && break
        echo -n "."
        sleep 1
        time_passed=$(expr $time_passed + 1)
    done
}
################################################
## 	External interface		    ###
################################################

_reload_precheck()
{
	#Run RELOAD_PRECHECK if defined into the service file
    #this is defined for example into the /etc/init.d/svsde for the PolicySyntaxChecker
    if [ -n  "$RELOAD_PRECHECK" ] ; then
		local FAILED=0
        eval "$RELOAD_PRECHECK " 2>&1 >/dev/null
        if [ $? -ne 0 ]; then
            return 1
        fi
    fi
	return 0		
}

_check_and_refresh_etc_serial()
{ 
   local _link_address=$(/usr/local/sandvine/scripts/get_net_interface linkaddr)
   local _serial=$(echo $_link_address | tr '[:lower:]' '[:upper:]' | sed 's/://g')
   local _current_read_serial=$(cat /etc/serial)
   if [ "$_serial" != "$_current_read_serial" ] ; then
        echo $_serial>/etc/serial
        Svlog MCD_LOG_SDE_IT  MCD_LOG_SDE_IT_BLANK_1 $SVLOG_FACILITY.info "The content for /etc/serial is not corresponding to machine serial number updating file content."
   fi
}

start() {
    _check_and_refresh_etc_serial
    _set_pdb_status_path
    _set_svlog_permissions
    mstatus >/dev/null 2>&1
	[ $? -eq 0 ] && echo "$processname service already running ..." && return 0
    echo -n $"Starting $processname service: "
    _kill_scripts $ALL_SCRIPTS # for case we have the scripts alive, because the stop service didn't complete
    _kill_scripts $SCRIPTS_NOT_KILLED_BY_SIGKILL # we force also script that are not kill by -9 because we are restarting them
   
	# Run a pre-start check operation - in this case it can be the policySyntaxChecker for SVSDE - if this operation fails, 
	# it's not make sense to start anything
    if ! _reload_precheck ; then
       	_print_service_FAIL "loading"
		return 1
    fi

	# for all processes other than scdpd this function
    # will set the admin status to up, but for the
    # scdpd it would not work as the pdb tree is not
    # online at this point
    local retval1=0 retval3=0
    rm -f $PRE_START_FIFO
    mkfifo $PRE_START_FIFO
    [ ! -z "$ALL_SCRIPTS" ] && for script in $ALL_SCRIPTS
    do
        _daemon "$script $processname"
    done
    [ ! -z "$SCRIPTS_NOT_KILLED_BY_SIGKILL" ] && for script in $SCRIPTS_NOT_KILLED_BY_SIGKILL
    do
        _daemon $script
    done

    _wait_prerequisite_scripts $PREREQUISITE_SCRIPTS
    retval1=$?
    rm -f $PRE_START_FIFO
    if [ $retval1 -ne 0 ]; then
        _kill_scripts $ALL_SCRIPTS
		_set_reload_status "false"
        _print_service_FAIL  
        [ $has_warning -ne 0 ] && print_warning_msg "(re)starting" # Doesn't work, set at run_svsde
        return $retval1
    fi

    #_set_admin_status_up_pre
    GDB=0
    if [ "$1" = "gdb" ] ; then
        $PROCESS_SCRIPT $*
        echo -n $"Stopping helper scripts"
        _kill_scripts $ALL_SCRIPTS
        _kill_scripts_without_9 $SCRIPTS_NOT_KILLED_BY_SIGKILL
        _print_service_OK
        exit 0
    else
        $PROCESS_SCRIPT $* >/dev/null 2>&1 &
    fi
    _wait_pid_file $processname
    retval1=$?
    if [ $retval1 -eq 0 ];then
        touch /var/lock/subsys/$processname
        binary_check "setonline"
        retval3=$?
	## for the scdpd we can only set the admin status to up here, as only here we would have
	## the pdb tree ready to set the status
    else
		_set_reload_status "false"
        _print_service_FAIL	
	fi
    [ $has_warning -ne 0 ] && print_warning_msg "(re)starting" # Doesn't work, set at run_svsde
    return $(( $retval1 + ${retval3:-0} ))
}

stop() {
    _set_pdb_status_path
	local myPID=`pgrep $short_script` 
	local retval=0

	if [ ! -z "$myPID" ];then
		echo -n $"Stopping $processname service "
	else
        	echo $"$processname is not running."
	fi

	# kill the process
	_set_admin_status down $pdb_status_location
	[ ! -z "$myPID" ] && kill $myPID >/dev/null 2>&1 && retval=$? || retval=1 
	
	while pgrep $short_script >/dev/null ; do echo -n $"." ; sleep 1; done
	
	
	# per reqst00374275-graceful shutdown (service sde stop) does not close BDB immediately
	# These scripts are replaced after the end of svsde,but  to avoid race condition with service shutdown
	# we should wait that svsde is really stop
	_kill_scripts_without_9 $SCRIPTS_NOT_KILLED_BY_SIGKILL 	>/dev/null 2>&1 &
 
	_kill_scripts $ALL_SCRIPTS
	if [ $retval -eq 0 ];then
	    	rm -f /var/lock/subsys/$processname
	    	rm -f $pidfile
	    	_print_service_OK
	else
	    	_print_service_FAIL
	fi
}

restart() {
	stop
	start
	return $?
}

mstatus() {

	local mpid=$(cat $pidfile 2>/dev/null)
	#Process is alive only if its pid (which appears in $processname.pid) is a name of an actual folder in /proc. This folder contains a file named cmdline which should contain $processname. 
	if [ -z "$mpid" ] || [ ! -d /proc/$mpid ] || ! grep -q $processname /proc/$mpid/cmdline ;then
		[ -f $pidfile ] && REM="but pid file exists"
		echo "$processname process is stopped $REM"
		return 1
	else
		echo "$processname process (pid $mpid) is running ..."
		return 0
	fi
}
_wait_time_change()
{
	local min_timeout=$1
	local bname=$2
	local bpid=$3
	local otime=$5 # $3 is ":"
	local timeout=$(seq 1 10)
	## we want to wait at least some timeout time before
	## going one (see reqst00302937) as the reload time change
	## is at the start of the reload not at the end
	## and if we want to make sure that we are reading
	## the correct value we need to give the reload some
	## starting lead
	for (( ti=0; ti < $min_timeout; ti++))
        do
                echo -n $"."
                sleep 1
        done


	for i in $timeout
	do
		set -- $($PDB_EXE -c "ls devices/service/1/serviceComponentTable/serviceComponentEntry/lastReloadTime/sde/" 2>/dev/null | grep $bname)
		if [ "$2" != "$bpid" ] || [ "$4" != "$otime" ];then
			return 0
		else
			echo -n $"."
			sleep 1
		fi
	done
	return 1
}

mreload() {
    _check_and_refresh_etc_serial
	_set_svlog_permissions
	_set_pdb_status_path
	

	setupJMS
	if [ ! -z "$KILL_HUP" ];then
		mstatus > /dev/null
		if [ $? -eq 1 ];then
			echo -n "Can't send reload to $processname, the process is not running."
			# dont want to change the reload status if scdpd is not running.
			if _is_running "scdpd" ; then
			    _set_reload_status "false"
			fi
			_print_service_FAIL	
			return 1
		fi

		if ! _reload_precheck ; then
	       		_print_service_FAIL "reloading"
			return 1
		fi
		
		
		# since we sourced the sde common function library
		AVOID_SET_TRAPS=1

		local retval1=0 retval3=0
		# we may need to reset the status if reload is successful ourselves, so we need to save current reload status
		_get_reload_error_entries true
		local ctime=$($PDB_EXE -c "ls devices/service/1/serviceComponentTable/serviceComponentEntry/lastReloadTime/sde/" 2>/dev/null  | grep $processname)
		if _is_running "scdpd" ; then
		    _reload_conf $processname
		else
	    	    echo -en "Error connecting to scdpd, make sure it is running."
		    _print_service_FAIL
		    return 1
		fi
		echo -en $"\nApply configuration to $processname. "
		echo -n $"Send reload to $processname"
		kill -HUP $(cat $pidfile)
		retval1=$?
		if [ $retval1 -eq 0 ];then
			#Send a notification to background script  about reload - this is used by sv_tunnnel daemon
			[ ! -z "$ALL_SCRIPTS" ] && for script in $ALL_SCRIPTS
			do
				#scan the script to extract the reload file name expected (if there is a such one)
				local rf=$(awk -F= '/^reload_file/{print $2}' $script |xargs)
				[ -n "$rf" ] && touch $rf
			done
			if [[ "$processname" =~ svsde|scdpd ]] ; then
				[ ! -z "$ctime" ] && _wait_time_change $(_get_reload_timeout) $ctime
				binary_check
				retval3=$?
			else
				## in the case of the scdpd we don't want to set the status of reload
				_print_service_OK
			fi
		else
			## we need to set the value of the reload if we failed the reload
			## we don't care of scdpd reload status
			if [ $processname != "scdpd" ]; then
	    			_set_reload_status "false"
			fi
		 	_print_service_FAIL	
		fi
	fi
	return $(( $retval1 + ${retval3:-0} ))
}

setupJMS()
{
    if [ "$processname" = "msd" ]; then
	 setup_jms $processname
    elif [ "$processname" = "svsde" ]; then
	 setup_jms "base"
    fi
}

RETVAL_F=0

COMMAND=$1
shift
case "$COMMAND" in
  version|Version)
	rpm -q $processname --qf '[%{NAME}: Version %{VERSION}-%{RELEASE}\n]' | sed 's/.el[0-9]//'
	;;
  start)
	setupJMS
	start $*
	RETVAL_F=$?
	;;
  stop)
	stop
	;;
  restart)
	stop
	setupJMS
	start $*
	RETVAL_F=$?
        ;;
  condrestart)
	if [ -f /var/lock/subsys/$processname ]; then
		stop
		start $*
		RETVAL_F=$?
	fi
	;;
  status)
	mstatus
	RETVAL_F=$?
	;;
  svreload)
	svreload
	RETVAL_F=$?
	;;
  reload)
	mreload
	RETVAL_F=$?
	;;
  *)
	echo $"Usage: $0 {start|stop|status|restart|reload|condrestart|version}"
	RETVAL_F=1
	;;
esac

exit $RETVAL_F
